<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component access="PRIVILEGED" extends="ui:input" support="proto" extensible="true" defaultFlavor="default, lookup" description="Represents an input field that suggests a list of values from the data provider as you type.">
    <aura:attribute name="inputClass" type="String" description="The css class for input component."/>
    <aura:attribute name="inputType" type="String" default="inputText" description="The type of input component (inputText or inputTextArea)."/>
    <aura:attribute name="inputFlavor" type="String" default="default, input" description="Optional aura:flavor override for the input component."/>

    <aura:attribute name="placeholder" access="PRIVILEGED" type="String" default="" description="Text that is displayed when the input field is empty, to prompt the user for a valid entry."/>
    <aura:attribute name="theme" type="String" default="default" description="Theme to apply to this component."/>
    <aura:attribute name="autocompleteButton" type="Aura.Component[]" description="Optional button to render with this component."/>
    <aura:attribute name="usePanel" type="boolean" default="false" description="Specifies whether to use ui:autocompletePanel as a wrapper for the list of options. The default is false."/>
    <aura:attribute name="maxlength" type="Integer" description="The maximum number of characters allowed in the inputTextForAutocomplete"/>
    <aura:attribute name="inputTitle" type="String" description="The title/tooltip for the input component."/>
    <aura:attribute name="selectOnTab" type="boolean"  default="true" description="Indicates whether pressing the tab key will select the highlighted list item. The default is true."/>

    <!-- START - the following attributes are only used when using the default list -->
    <aura:attribute name="dataProvider" access="PRIVILEGED" type="Aura.Component[]" description="A list of data provider components"/>
    <aura:attribute name="emptyListContent" type="Aura.Component[]" description="Content to be shown if the list is empty"/>
    <aura:attribute name="loadingIndicator" type="Aura.Component[]" description="Content to be shown while the list is loading"/>
    <aura:attribute name="optionVar" access="PRIVILEGED" type="String" description="The name by which to refer to the current data object inside of the template for each option."/>
    <aura:attribute name="propertyToMatch" type="String" default="label" description="The property name in the data object which is used to match typing in the input field."/>
    <aura:attribute name="matchFunc" access="PRIVILEGED" type="Aura.Action" description="Overrides default list item update behavior to allow custom text matching."/>
    <aura:attribute name="disableMatch" type="boolean" default="false" description="Indicates whether to disable keyword matching. The default is false."/>
    <aura:attribute name="listOption" access="PRIVILEGED" type="Aura.ComponentDefRef[]" description="A ComponentDefRef to use as the template for each generated option in the list."/>
    <aura:attribute name="listHeader" type="Aura.Component[]" description="A facet above the rendered list, for use as a list header"/>
    <aura:attribute name="listFooter" type="Aura.Component[]" description="A facet below the rendered list, for use as a list footer"/>
    <aura:attribute name="showListHeader" access="PRIVILEGED" type="Boolean" default="true" description="Indicates whether the listHeader is visible. The default is true."/>
    <aura:attribute name="showListFooter" access="PRIVILEGED" type="Boolean" default="true" description="Indicates whether the listFooter is visible. The default is true."/>
    <aura:attribute name="setDefaultHighlight" access="PRIVILEGED" type="boolean" default="true" description="Indicates whether the first option item should be highlighted by default. The default is true."/>
    <aura:attribute name="listReferenceComponent" type="Aura.Component[]" description="Sets the component that the lookup menu is displayed under."/>
    <aura:attribute name="devNameOrId" type="String" description="Id or alias for the autocomplete." />
    <aura:attribute name="showEmptyList" type="boolean" default="false" description="Indicates if an empty list should be visible when the keyword attribute in ui:autocompleteList is empty. The default is false."/>

    <aura:handler name="change" value="{!v.listReferenceComponent}" action="{!c.referenceElementChange}"/>
    <!-- END - the following attributes are only used when using the default list -->

    <aura:locator target="*" alias="autocomplete-content" description="Content in autocomplete">
        <aura:locatorContext key="devNameOrId" value="{!v.devNameOrId}"/>
    </aura:locator>

    <aura:attribute name="autocompleteList" type="Aura.Component[]" description="Custom list definition. Can be used to replace the default list."/>

    <!-- START - the following events are only used when using the default list -->
    <aura:registerEvent name="matchDone" type="ui:matchDone" description="The event fired when the matching is done."/>
    <aura:registerEvent name="selectListOption" access="PRIVILEGED" type="ui:selectListOption" description="The event fired when a list option is displayed."/>
    <!-- END - the following events are only used when using the default list -->

    <aura:registerEvent name="inputChange" access="PRIVILEGED" type="ui:inputChange" description="The event fired when the input value changes."/>

    <aura:registerEvent name="fetchData" type="ui:fetchData" description="The event indicates we need to fetch data through a data provider."/>
    <aura:handler name="fetchData" action="{!c.fetchData}"/>

    <aura:registerEvent name="abortFetchData" type="ui:abortFetchData" description="This event indicates that we want to abort a fetch data request sent by a data provider."/>
    <aura:handler name="abortFetchData" action="{!c.abortFetchData}"/>

    <aura:registerEvent name="matchText" type="ui:matchText" description="The event fired when a text match occurs."/>
    <aura:handler name="matchText" action="{!c.matchText}"/>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    <aura:handler name="listExpand" event="ui:autocompleteListExpand" action="{!c.handleListExpand}"/>
    
    <aura:if isTrue="{!v.inputType == 'inputTextArea'}">
        <ui:inputTextAreaForAutocomplete aura:id="input"
                                         aura:flavor="{!v.inputFlavor}"
                                         class="{!v.inputClass+' '+v.theme}"
                                         value="{!v.value}"
                                         inputTitle="{!v.inputTitle}"
                                         placeholder="{!v.placeholder}"
                                         maxlength="{!v.maxlength}"
                                         updateOn="{!v.updateOn}"
                                         ariaDescribedBy="{!v.ariaDescribedBy}"
                                         autocompleteButton="{!v.autocompleteButton}"
                                         disabled="{!v.disabled}"
                                         domId="{!v.domId}"/>
        <aura:set attribute="else">
            <ui:inputTextForAutocomplete aura:id="input"
                                         aura:flavor="{!v.inputFlavor}"
                                         class="{!v.inputClass+' '+v.theme}"
                                         value="{!v.value}"
                                         inputTitle="{!v.inputTitle}"
                                         placeholder="{!v.placeholder}"
                                         maxlength="{!v.maxlength}"
                                         updateOn="{!v.updateOn}"
                                         ariaDescribedBy="{!v.ariaDescribedBy}"
                                         autocompleteButton="{!v.autocompleteButton}"
                                         disabled="{!v.disabled}"
                                         domId="{!v.domId}"/>
        </aura:set>
    </aura:if>

    <aura:if isTrue="{!empty(v.autocompleteList)}">
        <aura:if isTrue="{!v.usePanel}">
            <ui:autocompletePanel aura:id="panel">
                <ui:autocompleteList aura:id="list" class="{!v.class + ' lookup__menu'}"
                                     dataProvider="{!v.dataProvider}"
                                     itemVar="{!v.optionVar}"
                                     itemTemplate="{!v.listOption}"
                                     emptyListContent="{!v.emptyListContent}"
                                     loadingIndicator="{!v.loadingIndicator}"
                                     listHeader="{!v.listHeader}"
                                     listFooter="{!v.listFooter}"
                                     showListHeader="{!v.showListHeader}"
                                     showListFooter="{!v.showListFooter}"
                                     theme="{!v.theme}"
                                     visible="false"
                                     role="listbox"
                                     propertyToMatch="{!v.propertyToMatch}"
                                     matchDone="{!c.handleMatchDone}"
                                     selectListOption="{!c.handleSelectOption}"
                                     updateAriaAttributes="{!c.updateAriaAttributes}"
                                     matchFunc="{!v.matchFunc}"
                                     disableMatch="{!v.disableMatch}"
                                     setDefaultHighlight="{!v.setDefaultHighlight}"
                                     showEmptyList="{!v.showEmptyList}"/>
            </ui:autocompletePanel>
            <aura:set attribute="else">
                <ui:autocompleteList aura:id="list" class="{!v.class + ' lookup__menu'}"
                                     dataProvider="{!v.dataProvider}"
                                     itemVar="{!v.optionVar}"
                                     itemTemplate="{!v.listOption}"
                                     emptyListContent="{!v.emptyListContent}"
                                     loadingIndicator="{!v.loadingIndicator}"
                                     listHeader="{!v.listHeader}"
                                     listFooter="{!v.listFooter}"
                                     showListHeader="{!v.showListHeader}"
                                     showListFooter="{!v.showListFooter}"
                                     theme="{!v.theme}"
                                     visible="false"
                                     role="listbox"
                                     propertyToMatch="{!v.propertyToMatch}"
                                     matchDone="{!c.handleMatchDone}"
                                     selectListOption="{!c.handleSelectOption}"
                                     updateAriaAttributes="{!c.updateAriaAttributes}"
                                     matchFunc="{!v.matchFunc}"
                                     disableMatch="{!v.disableMatch}"
                                     setDefaultHighlight="{!v.setDefaultHighlight}"
                                     showEmptyList="{!v.showEmptyList}"/>
            </aura:set>
        </aura:if>
        <aura:set attribute="else">
            {!v.autocompleteList}
        </aura:set>
    </aura:if>

</aura:component>