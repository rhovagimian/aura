<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:documentation>
	<aura:description>
		<p>A <code>ui:pillContainer</code> component contains <code>ui:pill</code> components in an ordered list. Pills can be added or removed from the input field as necessary.
		To create an editable input field for pills, set the <code>pillInput</code> attribute on <code>ui:pillContainer</code>. 
		This attribute takes in a facet and can also take in a <code>ui:pillContainerAutoComplete</code> component for auto-completion. 
		The component you use as a facet must implement the <code>ui:pillContainerInput</code> interface. Use the <code>ui:eventLib</code> library to fire the blur and focus events automatically. 
<pre>&lt;aura:component implements="ui:pillContainerInput">
    &lt;aura:import library="ui:eventLib" property="lib"/>
    &lt;ui:inputText value="{!v.value}" label="pills"/>
&lt;/aura:component></pre>
		Alternatively, add blur and focus handlers for your input field, and fire the events in your client-side controller. 
		</p>
<pre>&lt;ui:inputText value="{!v.value}" label="pills" focus="{!c.focus}" blur="{!c.blur}"/></pre>
	<p>This client-side controller fires the blur event on the <code>ui:inputText</code> component.</p>
<pre>blur: function(component) {
   component.getEvent("blur").fire();
}</pre>		
		<h4>Methods</h4>
		<p><code>insertItems(items, fireInsertedEvent)</code></p>
		<p>Adds an array of pill items in the format <code>[{name:'name', id:'id'}, ...]</code>.</p>
		<ul>
		    <li>items: The list of pill items to add.</li>
		    <li>fireInsertedEvent: Specifies whether pill items have been inserted. The default is true.</li>
		</ul>
<pre>initializePills: function (cmp) {
    var pills = [{id:'pill01',label:"HTML",icon: {url:'path/to/url'}},
            {id:'pill02',label:"CSS",icon: {url:'path/to/url'}}];
  
    var pillContainer = component.find("pillContainer");
    pillContainer.insertItems(pills);
}</pre>		
        <p><code>clear()</code></p>
        <p>Clears the list of pill items.</p>
		<p><code>collapse()</code></p>
		<p>Collapses the pill list to the number of lines specified in the maxLines attribute.</p>
		<p><code>expand()</code></p>
		<p>Expands the pill list after being collapsed from the collapse method.</p> 
		<p><code>removeItems(items, fireRemovedEvent)</code></p>
		<p>Removes the list of pill items. Takes in an array of object in the format <code>[{name:'name', id:'id'}, ...]</code>.</p>
		<ul>
		    <li>items: The list of pill items to remove.</li>
		    <li>fireRemovedEvent: Specifies whether pill items have been removed. The default is true.</li>
		</ul>
		<p>See the Examples tab for more information.</p>
	</aura:description>	
	<aura:example name="pillAutocompleteExample" ref="uitest:pillContainer_WithAutocomplete" label="Creating Pills using Autocomplete">
    	<p>This pill container handles the <code>pillInserted</code> and <code>pillRemoved</code> events and contains an input field.</p>
	   Type "test" and select an autocomplete option to see how it works.
	   </aura:example>
	   
		<aura:example name="pillExample1" ref="uitest:pillContainer_WithTextInput" label="Creating Pills in an Input Field">
    	<p>This pill container handles the <code>pillInserted</code> and <code>pillRemoved</code> events and contains an input field.</p>
	   Type a string of text and press enter to see how it works.
	   </aura:example>	
		
</aura:documentation>
