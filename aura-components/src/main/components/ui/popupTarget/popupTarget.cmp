<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component access="PRIVILEGED" extensible="true" implements="ui:visible" description="A container that is displayed in response to a trigger event. If used in a mobile context, it is recommended that curtain be set to true to prevent nested iframes from consuming the closeOnClickOutside event." support="GA">

	<aura:import library="ui:panelPositioningLib" property="lib" />

    <aura:attribute name="visible" type="Boolean" default="false" description="Controls the visibility of the popup target. The default is false, which hides the menu."/>
    <aura:attribute access="GLOBAL" name="closeOnTabKey" type="Boolean" default="true" description="Indicates whether to close the target list on tab key or not." />
    <aura:attribute access="GLOBAL" name="autoPosition" type="Boolean" default="true" description="Move the popup target up when there is not enough space at the bottom to display. Note: even if autoPosition is set to false, popup will still position the menu relative to the trigger. To override default positioning, use manualPosition attribute."/>
	<aura:attribute name="manualPosition" type="Boolean" default="false" description="Flag to override auto position." />
    <aura:attribute access="PRIVILEGED" name="attachToBody" type="Boolean" default="false" description="Move the target up to HTML body level to make sure it is not blocked by others. "/>
    <aura:attribute name="referenceElement" type="Object" description="The reference node which this target list should be positioned to. Usually it is a trigger element." />
	<aura:attribute access="GLOBAL" name="curtain" type="Boolean" default="false" description="Whether or not to apply an overlay under the target." />
	<aura:attribute access="GLOBAL" name="closeOnClickOutside" type="Boolean" default="true" description="Close target when user clicks or taps outside of the target" />
	<aura:attribute name="closeOnClickInside" type="Boolean" default="false" description="Close target when user clicks or taps inside of the target" />
	<aura:attribute name="preTransitionClass" type="String" default="" description="This CSS class is initially applied to the target then removed prior to toggling the visible class. This is to allow for CSS transitions." />

    <aura:attribute name="showNubbin" type="Boolean" default="false" description="Shows a little triangle at the top when used in a menu." />

    <aura:registerEvent name="popupCollapse" type="ui:collapse" description="The event fired when the popup target list collapses."/>
    <aura:registerEvent name="popupExpand" type="ui:expand" description="The event fired when the popup target list displays."/>
    <aura:registerEvent name="popupKeyboardEvent" type="ui:popupKeyboardEvent" description="The event fired when the user interacts with the popup using the keyboard."/>
    <aura:registerEvent name="doClose" type="ui:collapse" description="Tell the target to close itself."/>
    
    <aura:handler name="popupKeyboardEvent" action="{!c.handleKeyboardEvent}"/>
    <aura:handler name="change" value="{!v.visible}" action="{!c.handleVisibilityChange}"/>

	<aura:if isTrue="{! v.attachToBody &amp;&amp; v.curtain}">
		<div class="{!v.class + ' popupCurtain ' + v.preTransitionClass}">
			<div aura:id="popupTarget" class="popupTargetContainer">
				{!v.body}
			</div>
		</div>
		
		<aura:set attribute="else">
			<div aura:id="popupTarget" class="{!v.class + ' popupTargetContainer ' + v.preTransitionClass + (v.showNubbin == true ? ' menu--nubbin-top' : '')}">
				{!v.body}
			</div>
		</aura:set>
	</aura:if>
</aura:component>
